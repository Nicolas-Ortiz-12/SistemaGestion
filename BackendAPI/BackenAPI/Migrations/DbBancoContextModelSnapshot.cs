// <auto-generated />
using System;
using BackenAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackenAPI.Migrations
{
    [DbContext(typeof(DbBancoContext))]
    partial class DbBancoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackenAPI.Models.Banco", b =>
                {
                    b.Property<int>("IdBancos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBancos"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPais")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdBancos");

                    b.HasIndex("IdPais");

                    b.ToTable("Bancos");
                });

            modelBuilder.Entity("BackenAPI.Models.Cuenta", b =>
                {
                    b.Property<int>("IdCuenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCuenta"));

                    b.Property<int>("IdBancos")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("NroCuenta")
                        .HasMaxLength(50)
                        .HasColumnType("bigint");

                    b.Property<int>("Saldo")
                        .HasColumnType("int");

                    b.Property<string>("TCuenta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCuenta");

                    b.HasIndex("IdBancos");

                    b.ToTable("Cuentas");
                });

            modelBuilder.Entity("BackenAPI.Models.Facturas", b =>
                {
                    b.Property<int>("id_factura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_factura"));

                    b.Property<int>("aplica")
                        .HasColumnType("int");

                    b.Property<DateOnly>("fecha_exp")
                        .HasColumnType("date");

                    b.Property<int>("id_prov")
                        .HasColumnType("int");

                    b.Property<int>("nro_factura")
                        .HasColumnType("int");

                    b.Property<int>("saldo")
                        .HasColumnType("int");

                    b.Property<int>("total")
                        .HasColumnType("int");

                    b.HasKey("id_factura")
                        .HasName("PKFacturas");

                    b.HasIndex("id_prov");

                    b.ToTable("Facturas", (string)null);
                });

            modelBuilder.Entity("BackenAPI.Models.Pais", b =>
                {
                    b.Property<int>("IdPais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPais"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdPais");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("BackenAPI.Models.Proveedores", b =>
                {
                    b.Property<int>("id_prov")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_prov"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ruc")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("telefono")
                        .HasColumnType("int");

                    b.HasKey("id_prov")
                        .HasName("PKProveedores");

                    b.ToTable("Proveedores", (string)null);
                });

            modelBuilder.Entity("BackenAPI.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Usuario");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("BackenAPI.Models.Banco", b =>
                {
                    b.HasOne("BackenAPI.Models.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("IdPais")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("BackenAPI.Models.Cuenta", b =>
                {
                    b.HasOne("BackenAPI.Models.Banco", "Banco")
                        .WithMany()
                        .HasForeignKey("IdBancos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banco");
                });

            modelBuilder.Entity("BackenAPI.Models.Facturas", b =>
                {
                    b.HasOne("BackenAPI.Models.Proveedores", "Proveedor")
                        .WithMany("Facturas")
                        .HasForeignKey("id_prov")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Facturas_Proveedores");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("BackenAPI.Models.Proveedores", b =>
                {
                    b.Navigation("Facturas");
                });
#pragma warning restore 612, 618
        }
    }
}
